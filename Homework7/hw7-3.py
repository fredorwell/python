# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться
# округление значения до целого числа. Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно
# равняться сумме ячеек исходных двух клеток. Вычитание. Участвуют две клетки. Операцию необходимо выполнять только
# если разность количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение. Умножение.
# Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух
# клеток. Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток. В классе необходимо реализовать метод make_order(), принимающий экземпляр класса
# и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам. Метод должен возвращать строку вида
# *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда
# не хватает, то в последний ряд записываются все оставшиеся. Например, количество ячеек клетки равняется 12,
# количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n**. Или, количество ячеек клетки
# равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку: *****\n*****\n*****.

class Cell:
    def __init__(self, qua_cell):
        self.qua = qua_cell



    def __add__(self, other):
        res = self.qua + other.qua
        return f'Суммарно клеток: {res}'

    def __sub__(self, other):
        if self.qua > other.qua:
            res = self.qua - other.qua
            return f'Осталось клеток: {res}'
        else:
            return 'результат отрицательный'

    def __mul__(self, other):
        res = self.qua * other.qua
        return f'Перемножение клеток: {res}'

    def __truediv__(self, other):
        res = self.qua / other.qua
        return f'Деление клеток клеток: {res}'



    def make_order(self, cells_in_row):
        row = ''
        for i in range(int(self.qua / cells_in_row)):
            row += f'{"*" * cells_in_row} \n'
        row += f'{"*" * (self.qua % cells_in_row)}'
        return row



c1 = Cell(15)
c2 = Cell(10)

print(c1 + c2)
print(c1 - c2)
print(c2 - c1)
print(c2 * c1)
print(c2 / c1)
print()
print(c1.make_order(5))